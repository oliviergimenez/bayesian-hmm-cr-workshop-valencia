gamma[1,2,i] <- 1 - phi[i]  # Pr(alive t -> dead t+1)
gamma[2,1,i] <- 0           # Pr(dead t -> alive t+1)
gamma[2,2,i] <- 1           # Pr(dead t -> dead t+1)
}
beta[1] ~ dnorm(mean = 0, sd = 1.5)
beta[2] ~ dnorm(mean = 0, sd = 1.5)
sdeps ~ dunif(0, 10)
delta[1] <- 1          # Pr(alive t = 1) = 1
delta[2] <- 0          # Pr(dead t = 1) = 0
# likelihood
for (i in 1:N){
z[i,first[i]] ~ dcat(delta[1:2])
for (j in (first[i]+1):T){
z[i,j] ~ dcat(gamma[z[i,j-1], 1:2, i])
y[i,j] ~ dcat(omega[z[i,j], 1:2])
}
}
})
# Chunk 10
mcmc.phiwlrep <- nimbleMCMC(code = hmm.phiwlrep,
constants = my.constants,
data = my.data,
inits = initial.values,
monitors = parameters.to.save,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains)
# Chunk 11
MCMCtrace(mcmc.phiwlrep, params = "sdeps", pdf = FALSE)
# Chunk 12
hmm.phiwlrep <- nimbleModel(code = hmm.phiwlrep,
constants = my.constants,
data = my.data,
inits = initial.values())
mcmcConf <- configureMCMC(hmm.phiwlrep)
# Chunk 13
mcmcConf$removeSamplers('sdeps')
mcmcConf$addSampler(target = 'sdeps',
type = "slice")
mcmcConf
# Chunk 14
Rmcmc <- buildMCMC(mcmcConf)
Cmodel <- compileNimble(hmm.phiwlrep)
Cmcmc <- compileNimble(Rmcmc, project = hmm.phiwlrep)
# Chunk 15
Cmcmc$run(10000)
samples1 <- as.matrix(Cmcmc$mvSamples)
Cmcmc$run(10000)
samples2 <- as.matrix(Cmcmc$mvSamples)
# Chunk 16
df.sdeps <- data.frame(iter = c(2501:10000, 2501:10000),
samples = c(samples1[2501:10000,"sdeps"], samples2[2501:10000,"sdeps"]),
chain = c(rep("chain 1", length(samples1[2501:10000,"sdeps"])),
rep("chain 2", length(samples2[2501:10000,"sdeps"]))))
df.beta <- data.frame(iter = c(2501:10000, 2501:10000),
beta1 = c(samples1[2501:10000,"beta[1]"], samples2[2501:10000,"beta[1]"]),
beta2 = c(samples1[2501:10000,"beta[2]"], samples2[2501:10000,"beta[2]"]),
chain = c(rep("chain 1", length(samples1[2501:10000,"sdeps"])),
rep("chain 2", length(samples2[2501:10000,"sdeps"]))))
# Chunk 17
df.sdeps %>%
ggplot() +
aes(x = iter, y = samples, group = chain, color = chain) +
geom_line() +
labs(x = "iterations", y = "random effect standard deviation", color = "")
# Chunk 18
df.beta %>%
ggplot() +
aes(x = beta1, y = beta2, group = chain, color = chain) +
geom_point(alpha = .2) +
labs(x = "beta1", y = "beta2", color = "")
# Chunk 19
mcmcConf$removeSamplers(c('beta[1]','beta[2]'))
mcmcConf$addSampler(target = c('beta[1]','beta[2]'),
type = "RW_block")
mcmcConf
Rmcmc <- buildMCMC(mcmcConf)
Cmodel <- compileNimble(hmm.phiwlrep)
Cmcmc <- compileNimble(Rmcmc, project = hmm.phiwlrep)
# Chunk 20
Cmcmc$run(10000)
samples <- as.matrix(Cmcmc$mvSamples)
# Chunk 21
samples %>%
as_tibble() %>%
select(!starts_with("z")) %>% # ignore the latent states z
summarise(across(everything(), list(mean = mean, sd = sd)))
geese <- read_csv("geese.csv", col_names = TRUE)
y <- as.matrix(geese)
get.first <- function(x) min(which(x != 0))
first <- apply(y, 1, get.first)
mask <- which(first!=ncol(y)) # individuals that are not first encountered at last occasion
y <- y[mask, ]                # keep only these
first <- first[mask]
multisite.marginalized <- nimbleCode({
# -------------------------------------------------
# Parameters:
# phiA: survival probability site A
# phiB: survival probability site B
# phiC: survival probability site B
# psiAA = psiA[1]: movement probability from site A to site A (reference)
# psiAB = psiA[2]: movement probability from site A to site B
# psiAC = psiA[3]: movement probability from site A to site C
# psiBA = psiB[1]: movement probability from site B to site A
# psiBB = psiB[2]: movement probability from site B to site B (reference)
# psiBC = psiB[3]: movement probability from site B to site C
# psiCA = psiC[1]: movement probability from site C to site A
# psiCB = psiC[2]: movement probability from site C to site B
# psiCC = psiC[3]: movement probability from site C to site C (reference)
# pA: recapture probability site A
# pB: recapture probability site B
# pC: recapture probability site C
# -------------------------------------------------
# States (z):
# 1 alive at A
# 2 alive at B
# 2 alive at C
# 3 dead
# Observations (y):
# 1 not seen
# 2 seen at A
# 3 seen at B
# 3 seen at C
# -------------------------------------------------
# survival priors
phiA ~ dunif(0, 1)
phiB ~ dunif(0, 1)
phiC ~ dunif(0, 1)
# priors for detection
pA ~ dunif(0, 1)
pB ~ dunif(0, 1)
pC ~ dunif(0, 1)
# priors for transitions: Dirichlet
psiA[1:3] ~ ddirch(alpha[1:3])
psiB[1:3] ~ ddirch(alpha[1:3])
psiC[1:3] ~ ddirch(alpha[1:3])
# probabilities of state z(t+1) given z(t)
gamma[1,1] <- phiA * psiA[1]
gamma[1,2] <- phiA * psiA[2]
gamma[1,3] <- phiA * psiA[3]
gamma[1,4] <- 1 - phiA
gamma[2,1] <- phiB * psiB[1]
gamma[2,2] <- phiB * psiB[2]
gamma[2,3] <- phiB * psiB[3]
gamma[2,4] <- 1 - phiB
gamma[3,1] <- phiC * psiC[1]
gamma[3,2] <- phiC * psiC[2]
gamma[3,3] <- phiC * psiC[3]
gamma[3,4] <- 1 - phiC
gamma[4,1] <- 0
gamma[4,2] <- 0
gamma[4,3] <- 0
gamma[4,4] <- 1
# probabilities of y(t) given z(t)
omega[1,1] <- 1 - pA     # Pr(alive A t -> non-detected t)
omega[1,2] <- pA         # Pr(alive A t -> detected A t)
omega[1,3] <- 0          # Pr(alive A t -> detected B t)
omega[1,4] <- 0          # Pr(alive A t -> detected C t)
omega[2,1] <- 1 - pB     # Pr(alive B t -> non-detected t)
omega[2,2] <- 0          # Pr(alive B t -> detected A t)
omega[2,3] <- pB         # Pr(alive B t -> detected B t)
omega[2,4] <- 0          # Pr(alive B t -> detected C t)
omega[3,1] <- 1 - pC     # Pr(alive C t -> non-detected t)
omega[3,2] <- 0          # Pr(alive C t -> detected A t)
omega[3,3] <- 0          # Pr(alive C t -> detected B t)
omega[3,4] <- pC         # Pr(alive C t -> detected C t)
omega[4,1] <- 1          # Pr(dead t -> non-detected t)
omega[4,2] <- 0          # Pr(dead t -> detected A t)
omega[4,3] <- 0          # Pr(dead t -> detected B t)
omega[4,4] <- 0          # Pr(dead t -> detected C t)
# initial state probs
for(i in 1:N) {
init[i, 1:4] <- gamma[ y[i, first[i] ] - 1, 1:4 ] # First state propagation
}
# likelihood
for (i in 1:N){
y[i,(first[i]+1):K] ~ dHMM(init = init[i,1:4],  # count data from first[i] + 1
probObs = omega[1:4,1:4],     # observation matrix
probTrans = gamma[1:4,1:4],   # transition matrix
len = K - first[i],           # nb of occasions
checkRowSums = 0)             # do not check whether elements in a row sum tp 1
}
})
my.data <- list(y = y + 1,
alpha = c(1, 1, 1))
my.constants <- list(first = first,
K = ncol(y),
N = nrow(y))
initial.values <- function(){list(phiA = runif(1, 0, 1),
phiB = runif(1, 0, 1),
phiC = runif(1, 0, 1),
psiA = rdirch(1, c(1,1,1)),
psiB = rdirch(1, c(1,1,1)),
psiC = rdirch(1, c(1,1,1)),
pA = runif(1, 0, 1),
pB = runif(1, 0, 1),
pC = runif(1, 0, 1))}
parameters.to.save <- c("phiA", "phiB", "phiC", "psiA", "psiB", "psiC","pA", "pB", "pC")
n.iter <- 10000
n.burnin <- 5000
n.chains <- 2
system.time(multisite.marginalized.out <- nimbleMCMC(code = multisite.marginalized,
constants = my.constants,
data = my.data,
inits = initial.values(),
monitors = parameters.to.save,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains))
MCMCsummary(multisite.marginalized.out, round = 2)
dHMMweighted <- nimbleFunction(
run = function (x = double(1),
init = double(1),
probObs = double(2),
probTrans = double(2),
len = double(0),
mult = double(0), # NEWLY ADDED: argument stating number of occurrences
# of same encounter history in entire dataset
checkRowSums = integer(0, default = 0),
log = integer(0, default = 0))
{
if (length(x) != len)
nimStop("In dHMM: Argument len must be length of x or 0.")
if (nimDim(probObs)[1] != nimDim(probTrans)[1])
nimStop("In dHMM: Length of dimension 1 in probObs must equal length of dimension 1 in probTrans.")
if (nimDim(probTrans)[1] != nimDim(probTrans)[2])
nimStop("In dHMM: probTrans must be a square matrix.")
## There was a strict test for sum(init) == 1.  This could be true in R and false in C++!
if (abs(sum(init) - 1) > 1e-06)
nimStop("In dHMM: Initial probabilities must sum to 1.")
if (checkRowSums) {
transCheckPasses <- TRUE
for (i in 1:nimDim(probTrans)[1]) {
thisCheckSum <- sum(probTrans[i, ])
if (abs(thisCheckSum - 1) > 1e-06) {
nimPrint("In dHMM: Problem with sum(probTrans[i,]) with i = ",
i, ". The sum should be 1 but is ", thisCheckSum)
transCheckPasses <- FALSE
}
}
obsCheckPasses <- TRUE
for (i in 1:nimDim(probObs)[1]) {
thisCheckSum <- sum(probObs[i, ])
if (abs(thisCheckSum - 1) > 1e-06) {
nimPrint("In dHMM: Problem with sum(probObs[i,]) with i = ",
i, ". The sum should be 1 but is ", thisCheckSum)
obsCheckPasses <- FALSE
}
}
if (!(transCheckPasses | obsCheckPasses))
nimStop("In dHMM: probTrans and probObs were not specified correctly.  Probabilities in each row (second dimension) must sum to 1.")
if (!transCheckPasses)
nimStop("In dHMM: probTrans was not specified correctly.  Probabilities in each row (second dimension) must sum to 1.")
if (!obsCheckPasses)
nimStop("In dHMM: probObs was not specified correctly. Probabilities in each row must sum to 1.")
}
pi <- init
logL <- 0
nObsClasses <- nimDim(probObs)[2]
for (t in 1:len) {
if (x[t] > nObsClasses | x[t] < 1)
nimStop("In dHMM: Invalid value of x[t].")
Zpi <- probObs[, x[t]] * pi
sumZpi <- sum(Zpi)
logL <- logL + log(sumZpi) * mult # NEWLY ADDED
if (t != len)
pi <- ((Zpi %*% probTrans)/sumZpi)[1, ]
}
if (log)
return(logL)
return(exp(logL))
returnType(double())
})
multisite.marginalized <- nimbleCode({
# -------------------------------------------------
# Parameters:
# phiA: survival probability site A
# phiB: survival probability site B
# phiC: survival probability site B
# psiAA = psiA[1]: movement probability from site A to site A (reference)
# psiAB = psiA[2]: movement probability from site A to site B
# psiAC = psiA[3]: movement probability from site A to site C
# psiBA = psiB[1]: movement probability from site B to site A
# psiBB = psiB[2]: movement probability from site B to site B (reference)
# psiBC = psiB[3]: movement probability from site B to site C
# psiCA = psiC[1]: movement probability from site C to site A
# psiCB = psiC[2]: movement probability from site C to site B
# psiCC = psiC[3]: movement probability from site C to site C (reference)
# pA: recapture probability site A
# pB: recapture probability site B
# pC: recapture probability site C
# -------------------------------------------------
# States (z):
# 1 alive at A
# 2 alive at B
# 2 alive at C
# 3 dead
# Observations (y):
# 1 not seen
# 2 seen at A
# 3 seen at B
# 3 seen at C
# -------------------------------------------------
# survival priors
phiA ~ dunif(0, 1)
phiB ~ dunif(0, 1)
phiC ~ dunif(0, 1)
# detection priors
pA ~ dunif(0, 1)
pB ~ dunif(0, 1)
pC ~ dunif(0, 1)
# transition priors: Dirichlet
psiA[1:3] ~ ddirch(alpha[1:3])
psiB[1:3] ~ ddirch(alpha[1:3])
psiC[1:3] ~ ddirch(alpha[1:3])
gamma[1,1] <- phiA * psiA[1]
gamma[1,2] <- phiA * psiA[2]
gamma[1,3] <- phiA * psiA[3]
gamma[1,4] <- 1 - phiA
gamma[2,1] <- phiB * psiB[1]
gamma[2,2] <- phiB * psiB[2]
gamma[2,3] <- phiB * psiB[3]
gamma[2,4] <- 1 - phiB
gamma[3,1] <- phiC * psiC[1]
gamma[3,2] <- phiC * psiC[2]
gamma[3,3] <- phiC * psiC[3]
gamma[3,4] <- 1 - phiC
gamma[4,1] <- 0
gamma[4,2] <- 0
gamma[4,3] <- 0
gamma[4,4] <- 1
# probabilities of y(t) given z(t)
omega[1,1] <- 1 - pA     # Pr(alive A t -> non-detected t)
omega[1,2] <- pA         # Pr(alive A t -> detected A t)
omega[1,3] <- 0          # Pr(alive A t -> detected B t)
omega[1,4] <- 0          # Pr(alive A t -> detected C t)
omega[2,1] <- 1 - pB     # Pr(alive B t -> non-detected t)
omega[2,2] <- 0          # Pr(alive B t -> detected A t)
omega[2,3] <- pB         # Pr(alive B t -> detected B t)
omega[2,4] <- 0          # Pr(alive B t -> detected C t)
omega[3,1] <- 1 - pC     # Pr(alive C t -> non-detected t)
omega[3,2] <- 0          # Pr(alive C t -> detected A t)
omega[3,3] <- 0          # Pr(alive C t -> detected B t)
omega[3,4] <- pC         # Pr(alive C t -> detected C t)
omega[4,1] <- 1          # Pr(dead t -> non-detected t)
omega[4,2] <- 0          # Pr(dead t -> detected A t)
omega[4,3] <- 0          # Pr(dead t -> detected B t)
omega[4,4] <- 0          # Pr(dead t -> detected C t)
for(i in 1:N) {
init[i, 1:4] <- gamma[ y[i, first[i] ] - 1, 1:4 ] # First state propagation
}
# likelihood
for (i in 1:N){
y[i,(first[i]+1):K] ~ dHMMweighted(init = init[i,1:4], # count data from first[i] + 1
mult = mult[i],
probObs = omega[1:4,1:4],
probTrans = gamma[1:4,1:4],
len = K - first[i],
checkRowSums = 0)
}
})
geese <- read_csv("geese.csv", col_names = TRUE)
y <- as.matrix(geese)
y_weighted <- y %>%
as_tibble() %>%
group_by_all() %>%
summarise(mult = n()) %>%
relocate(mult) %>%
as.matrix()
head(y_weighted)
mult <- y_weighted[,1] # nb of individuals w/ a particular encounter history
y <- y_weighted[,-1] # pooled data
get.first <- function(x) min(which(x != 0))
first <- apply(y, 1, get.first)
mask <- which(first!=ncol(y))
y <- y[mask, ]
first <- first[mask]
mult <- mult[mask]
my.data <- list(y = y + 1,
alpha = c(1, 1, 1))
my.constants <- list(first = first,
K = ncol(y),
N = nrow(y),
mult = mult)
initial.values <- function(){list(phiA = runif(1, 0, 1),
phiB = runif(1, 0, 1),
phiC = runif(1, 0, 1),
psiA = rdirch(1, c(1,1,1)),
psiB = rdirch(1, c(1,1,1)),
psiC = rdirch(1, c(1,1,1)),
pA = runif(1, 0, 1),
pB = runif(1, 0, 1),
pC = runif(1, 0, 1))}
parameters.to.save <- c("phiA", "phiB", "phiC", "psiA", "psiB", "psiC","pA", "pB", "pC")
n.iter <- 10000
n.burnin <- 5000
n.chains <- 2
system.time(multisite.marginalized.out <- nimbleMCMC(code = multisite.marginalized,
constants = my.constants,
data = my.data,
inits = initial.values(),
monitors = parameters.to.save,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains))
rHMMweighted <- nimbleFunction(
run = function(n = integer(),    ## Observed capture (state) history
init = double(1),
probObs = double(2),
probTrans = double(2),
len = double(0, default = 0),
mult = double(0),
checkRowSums = double(0, default = 1)) {
returnType(double(1))
if (dim(probObs)[1] != dim(probTrans)[1]) stop("In rHMM: Number of cols in probObs must equal number of cols in probTrans.")
if (dim(probTrans)[1] != dim(probTrans)[2]) stop("In rHMM: probTrans must be a square matrix.")
if (abs(sum(init) - 1) > 1e-06) stop("In rHMM: Initial probabilities must sum to 1.")
if (checkRowSums) {
transCheckPasses <- TRUE
for (i in 1:dim(probTrans)[1]) {
thisCheckSum <- sum(probTrans[i,])
if (abs(thisCheckSum - 1) > 1e-6) {
## Compilation doesn't support more than a simple string for stop()
## so we provide more detail using a print().
print("In rHMM: Problem with sum(probTrans[i,]) with i = ", i, ". The sum should be 1 but is ", thisCheckSum)
transCheckPasses <- FALSE
}
}
obsCheckPasses <- TRUE
for (i in 1:dim(probObs)[1]) {
thisCheckSum <- sum(probObs[i,])
if (abs(thisCheckSum - 1) > 1e-6) {
print("In rHMM: Problem with sum(probObs[i,]) with i = ", i, ". The sum should be 1 but is ", thisCheckSum)
obsCheckPasses <- FALSE
}
}
if(!(transCheckPasses | obsCheckPasses))
stop("In rHMM: probTrans and probObs were not specified correctly.  Probabilities in each row (second dimension) must sum to 1.")
if(!transCheckPasses)
stop("In rHMM: probTrans was not specified correctly.  Probabilities in each row (second dimension) must sum to 1.")
if(!obsCheckPasses)
stop("In rHMM: probObs was not specified correctly. Probabilities in each row must sum to 1.")
}
ans <- numeric(len)
probInit <- init
trueInit <- 0
r <- runif(1, 0, 1)
j <- 1
while (r > sum(probInit[1:j])) j <- j + 1
trueInit <- j
trueState <- trueInit
for (i in 1:len) {
# Transition to a new true state
r <- runif(1, 0, 1)
j <- 1
while (r > sum(probTrans[trueState, 1:j])) j <- j + 1
trueState <- j
# Detect based on the true state
r <- runif(1, 0, 1)
j <- 1
while (r > sum(probObs[trueState, 1:j])) j <- j + 1
ans[i] <- j
}
return(ans)
})
system.time(multisite.marginalized.out <- nimbleMCMC(code = multisite.marginalized,
constants = my.constants,
data = my.data,
inits = initial.values(),
monitors = parameters.to.save,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains))
MCMCsummary(multisite.marginalized.out, round = 2)
geese <- read_csv2("allgeese.csv", col_names = TRUE)
geese <- as.matrix(geese)
y <- geese[,-7]
mult <- geese[,7]
get.first <- function(x) min(which(x != 0))
first <- apply(y, 1, get.first)
mask <- which(first!=ncol(y))
y <- y[mask, ]
first <- first[mask]
mult <- mult[mask]
my.data <- list(y = y + 1,
alpha = c(1, 1, 1))
my.constants <- list(first = first,
K = ncol(y),
N = nrow(y),
mult = mult)
initial.values <- function(){list(phiA = runif(1, 0, 1),
phiB = runif(1, 0, 1),
phiC = runif(1, 0, 1),
psiA = rdirch(1, c(1,1,1)),
psiB = rdirch(1, c(1,1,1)),
psiC = rdirch(1, c(1,1,1)),
pA = runif(1, 0, 1),
pB = runif(1, 0, 1),
pC = runif(1, 0, 1))}
parameters.to.save <- c("phiA", "phiB", "phiC", "psiA", "psiB", "psiC","pA", "pB", "pC")
n.iter <- 10000
n.burnin <- 5000
n.chains <- 2
system.time(multisite.marginalized.out <- nimbleMCMC(code = multisite.marginalized,
constants = my.constants,
data = my.data,
inits = initial.values(),
monitors = parameters.to.save,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains))
MCMCsummary(multisite.marginalized.out, round = 2)
